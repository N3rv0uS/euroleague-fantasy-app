name: Smoke run (gamelogs)

on:
  workflow_dispatch:

jobs:
  probe:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas

      # ---- Κύριο diagnostic probe ----
      - name: Probe gamelogs endpoints (diagnostic)
        run: |
          python - << 'PY'
          import requests, pandas as pd

          season_code = "E2025"  # άλλαξέ το αν χρειάζεται
          base = "https://feeds.incrowdsports.com/provider/euroleague-feeds/v3/competitions/E/statistics"

          # 1) Συνήθη μονοπάτια για gamelogs (ένα row ανά παιχνίδι-παίκτη)
          endpoints = [
              f"{base}/games/players/traditional",
              f"{base}/players/traditional/games",
              f"{base}/players/games/traditional",
              # και το players/traditional με split=ByGame (χωρίς playerCodes)
              f"{base}/players/traditional",
          ]

          # 2) Παραλλαγές παραμέτρων
          param_sets = [
              {"seasonMode":"Range","fromSeasonCode":season_code,"toSeasonCode":season_code,"statisticMode":"perGame","limit":200,"statisticSortMode":"GameDate"},
              {"seasonMode":"Range","fromSeasonCode":season_code,"toSeasonCode":season_code,"statisticMode":"perGame","limit":200},
              {"seasonMode":"Range","fromSeasonCode":season_code,"toSeasonCode":season_code,"statisticMode":"perGame","statisticSplitMode":"ByGame","limit":200},  # κρίσιμο για κάποια instances
          ]

          def find_rows(j):
              if isinstance(j, list): return j
              if isinstance(j, dict):
                  for k in ("items","data","rows","list"):
                      v = j.get(k)
                      if isinstance(v, list): return v
                  for v in j.values():
                      if isinstance(v, list): return v
              return []

          ok = False
          chosen = None
          for url in endpoints:
              for params in param_sets:
                  # ειδική περίπτωση: το plain players/traditional χρειάζεται συχνά split=ByGame
                  p = dict(params)
                  if url.endswith("/players/traditional") and "statisticSplitMode" not in p:
                      p["statisticSplitMode"] = "ByGame"
                  r = requests.get(url, params=p, timeout=30)
                  print("STATUS:", r.status_code, "URL:", r.url)
                  try:
                      j = r.json()
                  except Exception as e:
                      print("JSON error:", e)
                      continue
                  rows = find_rows(j)
                  print("ROWS:", len(rows))
                  if rows:
                      df = pd.json_normalize(rows, sep="_")
                      print("COLUMNS(sample):", list(df.columns)[:12])
                      print(df.head(5).to_string(index=False))
                      df.to_csv("tmp_out/gamelogs_probe.csv", index=False)
                      ok = True
                      chosen = (url, p, len(df))
                      break
              if ok:
                  break

          if ok:
              print("[OK] Found working endpoint/params:", chosen)
          else:
              print("[FAIL] No rows from any endpoint/params variant.")
          PY

      - name: List outputs (if any)
        run: |
          ls -lah tmp_out || true
